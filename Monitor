// Instructables Internet of Things Class sample code
// Circuit Triggers Internet Action
// A button press is detected and stored in a feed
// An LED is used as confirmation feedback
//
// Modified by Becky Stern 2017
// based on the Adafruit IO Digital Input Example
// Tutorial Link: https://learn.adafruit.com/adafruit-io-basics-digital-input
//
// Adafruit invests time and resources providing this open source code.
// Please support Adafruit and open source hardware by purchasing
// products from Adafruit!
//
// Written by Todd Treece for Adafruit Industries
// Copyright (c) 2016 Adafruit Industries
// Licensed under the MIT license.
//
// All text above must be included in any redistribution.
//
//Modified by Jeremy S. Cook 5/10/2018 in order to hold an ouput on as part of a mailbox
//monitor device.

/************************ Adafruit IO Configuration *******************************/

// visit io.adafruit.com if you need to create an account,
// or if you need your Adafruit IO key.
#define IO_USERNAME    "Name"
#define IO_KEY         "Key"

/******************************* WIFI Configuration **************************************/

#define WIFI_SSID       "Name"
#define WIFI_PASS       "Password"

#include "AdafruitIO_WiFi.h"
AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);

/************************ Main Program Starts Here *******************************/
#include <ESP8266WiFi.h>
#include <AdafruitIO.h>
#include <Adafruit_MQTT.h>
#include <ArduinoHttpClient.h>

// set up the 'command' feed
AdafruitIO_Feed *command = io.feed("command");

void setup() {

  //setup pins
  pinMode(D6, OUTPUT); //pin setup to hold system on via transistor
  pinMode(BUILTIN_LED, OUTPUT); //LED stays on
  digitalWrite(D6, HIGH); // initialize with D6 High to keep system active

  // start the serial connection
  Serial.begin(115200);

  // connect to io.adafruit.com
  Serial.print("Connecting to Adafruit IO");
  io.connect();
  
  // set up a message handler for the 'command' feed.
  // the handleMessage function (defined below)
  // will be called whenever a message is
  // received from adafruit io.
  command->onMessage(handleMessage);

  // wait for a connection
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  // we are connected
  Serial.println();
  Serial.println(io.statusText());

}

void loop() {

  // io.run(); is required for all sketches.
  // it should always be present at the top of your loop
  // function. it keeps the client connected to
  // io.adafruit.com, and processes any incoming data.
  io.run();
  digitalWrite(BUILTIN_LED, LOW); //turns on built in LED (active low)
  command->save(1); //save the number 1 to the feed, indicating mailbox open
  delay(100);
  command->save(0); //set reading back to zero
  delay(2000); //stay on 2 seconds after feed is transmitted
  digitalWrite(D6, LOW); //turn transistor keeping it on off
  delay(30000); //if mailbox is left open, reed switch will still supply power wait 30 sec, then new msg
  command->save(2); //send "2" to indicate mailbox is left open.
  for (int x = 0; x < 3000; x++) delay(30000); //wait a little over a day to send a new message
  }

// this function is called whenever a 'command' message
// is received from Adafruit IO. it was attached to
// the command feed in the setup() function above.
void handleMessage(AdafruitIO_Data *data) {

  int command = data->toInt();

  if (command == 1){ //light up the LED
    Serial.print("received <- ");
    Serial.println(command);
  } else {
    Serial.print("received <- ");
    Serial.println(command);
  }
}
